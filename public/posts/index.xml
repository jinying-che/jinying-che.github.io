<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Terminal</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Jul 2021 11:18:14 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tmux Cheat Sheet</title>
      <link>/posts/tmux/</link>
      <pubDate>Sat, 10 Jul 2021 11:18:14 +0800</pubDate>
      
      <guid>/posts/tmux/</guid>
      
        <description>Session new session: tmux new -s name show session: tmux ls attach session with name: tmux a -t name detach from session: ctrl+b then d Panes split pane horizontally: ctrl+b then % split pane vertically: ctrl+b then &amp;quot; cloes current pane: ctrl+b then x Window Create current window: ctrl+b then c Close current window: ctrl+b then &amp;amp; Rename current window: ctrl+b then , Next window: ctrl+b then p Previous window: ctrl+b then n View in tmux ctrl+b then [</description>
      
    </item>
    
    <item>
      <title>Golang Standard Library</title>
      <link>/posts/go/go_std/</link>
      <pubDate>Sun, 27 Jun 2021 17:34:13 +0800</pubDate>
      
      <guid>/posts/go/go_std/</guid>
      
        <description>&lt;p&gt;Dive into golang standard library, where we can learn how high quality code is written and what the golang convention and style is.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>HHKB</title>
      <link>/posts/hhkb/</link>
      <pubDate>Thu, 24 Jun 2021 21:20:23 +0800</pubDate>
      
      <guid>/posts/hhkb/</guid>
      
        <description>CheatSheet BS and Delete Win mode: Fn+Control+w Mac mode: Fn+Control+m </description>
      
    </item>
    
    <item>
      <title>Setup Shadowsocks Server And Client</title>
      <link>/posts/shadowsocks/</link>
      <pubDate>Fri, 23 Apr 2021 09:22:08 +0800</pubDate>
      
      <guid>/posts/shadowsocks/</guid>
      
        <description>&lt;p&gt;In this article, we will setup the Shadowsock Server and Client from scratch and solve the issue during and after the setup.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Brief Introduction of Network Hardware</title>
      <link>/posts/network/hardware/</link>
      <pubDate>Mon, 05 Apr 2021 23:11:29 +0800</pubDate>
      
      <guid>/posts/network/hardware/</guid>
      
        <description>&lt;p&gt;The hardware inlucded in this post are Hub, Switch, Router, Modem, AP&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Algorithm: How I leetcode</title>
      <link>/posts/algorithm/</link>
      <pubDate>Sat, 13 Feb 2021 16:31:28 +0800</pubDate>
      
      <guid>/posts/algorithm/</guid>
      
        <description>&lt;p&gt;When do you usually use &lt;a href=&#34;https://leetcode.com/&#34;&gt;leetcode&lt;/a&gt;? For most of people, I think, the answer is to prepare the interview, me too.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post will be kept updating&lt;/em&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Setup Universal Ctags for Mac</title>
      <link>/posts/c/ctags/</link>
      <pubDate>Sat, 23 Jan 2021 15:16:29 +0800</pubDate>
      
      <guid>/posts/c/ctags/</guid>
      
        <description>&lt;p&gt;At the Beginning of this year, I&amp;rsquo;m going to start reading &lt;em&gt;Computer System A Programmer&#39;s Perspective&lt;/em&gt;, this whole book introduces the different aspects of computer system basing on C language, and there&amp;rsquo;s also plenty of C demos provided in the &lt;a href=&#34;http://csapp.cs.cmu.edu/3e/code.html&#34;&gt;web&lt;/a&gt;, to navigate the code, I try to use &lt;strong&gt;ctags&lt;/strong&gt;.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>How to profile Golang Program</title>
      <link>/posts/go/diagnostics/</link>
      <pubDate>Mon, 30 Nov 2020 08:35:51 +0800</pubDate>
      
      <guid>/posts/go/diagnostics/</guid>
      
        <description>First of all, this document is in progress and will keep updated.
Diagnostic by the http call is usually a convinient way in pratice. What we need to do is only two steps before starting the program:
import _ &amp;quot;net/http/pprof&amp;quot; http.ListenAndServe(&amp;quot;the address that defined in advance&amp;quot;, better use privaty ServerMux instead of the default one) Profile The port 6060 is an example that defined for the http listening. The default time is 30s that go pprof will collect the samples which used to profile without the specificatoin.</description>
      
    </item>
    
    <item>
      <title>How does golang implement the Rate Limiter</title>
      <link>/posts/go/ratelimiter/</link>
      <pubDate>Fri, 20 Nov 2020 12:04:09 +0800</pubDate>
      
      <guid>/posts/go/ratelimiter/</guid>
      
        <description>Core concept burst: the size of the bucket which is possible more than the limit token: refer to https://en.wikipedia.org/wiki/Token_bucket limit: the number of tokens that is obtained per second Core function // reserveN is a helper method for AllowN, ReserveN, and WaitN. // maxFutureReserve specifies the maximum reservation wait duration allowed. // reserveN returns Reservation, not *Reservation, to avoid allocation in AllowN and WaitN. func (lim *Limiter) reserveN(now time.Time, n int, maxFutureReserve time.</description>
      
    </item>
    
  </channel>
</rss>