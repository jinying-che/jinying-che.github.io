<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on Terminal</title><link>https://jinying-che.github.io/tags/algorithm/</link><description>Recent content in algorithm on Terminal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Mar 2023 23:03:37 +0800</lastBuildDate><atom:link href="https://jinying-che.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Dynamic Programming</title><link>https://jinying-che.github.io/posts/algorithm/dynamic_programming/</link><pubDate>Sat, 11 Mar 2023 23:03:37 +0800</pubDate><guid>https://jinying-che.github.io/posts/algorithm/dynamic_programming/</guid><description>Dynamic Programming is mainly an optimization over plain recursion. Wherever we see a recursive solution that has repeated calls for the same inputs, we can optimize it using Dynamic Programming. The idea is to simply store the results of subproblems so that we do not have to re-compute them when needed later. This simple optimization reduces time complexities from exponential to polynomial
Two Key Attributes How to classify a problem as a Dynamic Programming algorithm Problem?</description><content>&lt;p>Dynamic Programming is mainly an optimization over plain recursion. Wherever we see a recursive solution that has repeated calls for the same inputs, we can optimize it using Dynamic Programming. The idea is to simply store the results of subproblems so that we do not have to re-compute them when needed later. This simple optimization reduces time complexities from exponential to polynomial&lt;/p>
&lt;h2 id="two-key-attributes">Two Key Attributes&lt;/h2>
&lt;p>How to classify a problem as a Dynamic Programming algorithm Problem?&lt;/p>
&lt;h4 id="1-overlapping-subproblems">1. Overlapping Subproblems&lt;/h4>
&lt;p>The solutions to the same subproblems are needed repetitively for solving the actual problem.&lt;/p>
&lt;h4 id="2-optimal-substructure-property">2. Optimal Substructure Property&lt;/h4>
&lt;p>The solution to a given optimization problem can be obtained by the combination of optimal solutions to its sub-problems. Such optimal substructures are usually described by means of recursion.&lt;/p>
&lt;blockquote>
&lt;p>If a problem can be solved by combining optimal solutions to non-overlapping sub-problems, the strategy is called &amp;ldquo;divide and conquer&amp;rdquo; instead. This is why merge sort and quick sort are not classified as dynamic programming problems.&lt;/p>
&lt;/blockquote>
&lt;h2 id="the-steps-to-resove-the-a-dynamic-programming-problem">The Steps To Resove The A Dynamic Programming Problem&lt;/h2>
&lt;h4 id="1-identify-a-dp-problem-identify-the-subproblems">1. Identify a &lt;strong>DP&lt;/strong> problem, Identify the &lt;strong>subproblems&lt;/strong>&lt;/h4>
&lt;ol>
&lt;li>refer to two key attributes&lt;/li>
&lt;li>transfer the real world probelm to the math model, e.g. &lt;a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/">Best Time to Buy and Sell Stock&lt;/a>, actaully in the math world, which means to find the min and max value of the array, which is a significant dynamic problem flag.&lt;/li>
&lt;/ol>
&lt;h4 id="2-decide-a-state-expression-with-the-least-parameters">2. Decide a state expression with the Least parameters&lt;/h4>
&lt;p>Determine what information you need to represent the solution to each subproblem. This is often done using a state vector or matrix.&lt;/p>
&lt;h4 id="3-formulate-state-and-transition-relationships">3. Formulate state and transition relationships&lt;/h4>
&lt;p>Determine the relationship between the solution to a subproblem and the solutions to its smaller subproblems. This is often done using a recursive formula or a set of rules.&lt;/p>
&lt;h4 id="4-adding-memoization-or-tabulation-for-the-state">4. Adding memoization or tabulation for the state&lt;/h4>
&lt;p>Simply storing the state solution will allow us to access it from memory the next time that state is needed. Solve the subproblems in a bottom-up (tabulation) or top-down (memorization) manner.&lt;/p>
&lt;h4 id="5-compute-the-final-solution-using-the-solutions-to-the-subproblems">5. Compute the final solution using the solutions to the subproblems.&lt;/h4>
&lt;p>TODO: Example&lt;/p>
&lt;h2 id="memoization-vs-tabulation-todo">memoization vs tabulation (TODO)&lt;/h2></content></item></channel></rss>