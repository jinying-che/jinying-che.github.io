<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monitor on</title><link>https://chejinying.com/tech/tags/monitor/</link><description>Recent content in Monitor on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 23:07:11 +0800</lastBuildDate><atom:link href="https://chejinying.com/tech/tags/monitor/index.xml" rel="self" type="application/rss+xml"/><item><title>How histogram is calculated in Prometheus</title><link>https://chejinying.com/tech/posts/histogram/</link><pubDate>Thu, 16 Jan 2025 23:07:11 +0800</pubDate><guid>https://chejinying.com/tech/posts/histogram/</guid><description>&lt;h2 id="what-is-p99"&gt;What is P99?&lt;/h2&gt;
&lt;p&gt;P99 (or &amp;ldquo;99th percentile&amp;rdquo;) is a performance metric commonly used to describe latency or response-time behavior in systems.&lt;/p&gt;
&lt;p&gt;P99 latency is the value under which 99% of all requests complete.
That means only 1% of requests are slower than this threshold.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your P99 is 200 ms, then 99 out of 100 requests were served in 200 ms or less; only 1 request was slower.&lt;/p&gt;
&lt;p&gt;It highlights the “tail latency” — those rare, slow requests that the average hides but which can badly impact user experience.&lt;/p&gt;</description></item><item><title>rate vs irate</title><link>https://chejinying.com/tech/posts/rate_vs_irate/</link><pubDate>Wed, 02 Oct 2024 09:52:53 +0800</pubDate><guid>https://chejinying.com/tech/posts/rate_vs_irate/</guid><description>&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/rate_vs_irate.png" alt="rate_vs_irate"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;irate&lt;/code&gt; are based on the &lt;strong&gt;counter&lt;/strong&gt; type metrics.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rate(v range-vector)&lt;/code&gt; calculates the per-second average rate of increase of the time series in the &lt;strong&gt;range vector&lt;/strong&gt;, for example, &lt;code&gt;rate(http_request_total{method=&amp;quot;post&amp;quot;}[1m])&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It&amp;rsquo;s a rate: &lt;code&gt;total(now) - total(now - 1m) / 60s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s an average rate: over 1m&lt;/li&gt;
&lt;li&gt;Average is calculated over the time range, that&amp;rsquo;s why range vector is required.&lt;/li&gt;
&lt;li&gt;It provides a &lt;strong&gt;smoother&lt;/strong&gt; trend.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;irate(v range-vector)&lt;/code&gt; calculates the per-second instant rate of increase of the time series in the range vector.&lt;/p&gt;</description></item><item><title>alertmanager</title><link>https://chejinying.com/tech/posts/alertmanager/</link><pubDate>Wed, 29 May 2024 08:54:49 +0800</pubDate><guid>https://chejinying.com/tech/posts/alertmanager/</guid><description>&lt;h3 id="architecture"&gt;Architecture&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/alertmanager.png" alt="arch"&gt;&lt;/p&gt;
&lt;h3 id="design"&gt;Design&lt;/h3&gt;
&lt;h5 id="1-no-dedicated-status-eg-firing-or-resolved"&gt;1. No dedicated status (e.g. firing or resolved)&lt;/h5&gt;
&lt;p&gt;differentiate the alert by &lt;code&gt;EndAt&lt;/code&gt; timestamp&lt;/p&gt;
&lt;h5 id="2-group_wait-vs-group_interval-vs-repeat_interval"&gt;2. group_wait vs group_interval vs repeat_interval&lt;/h5&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/am_group.png" alt="group"&gt;&lt;/p&gt;
&lt;h3 id="source-code"&gt;Source Code&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Entrance&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;api: &lt;code&gt;api/v2/api.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;dispatch: &lt;code&gt;dispatch/dispatch.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;silence label parse: &lt;code&gt;cli/silence_add.go:func (c *silenceAddCmd) add&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Victorial Metrics</title><link>https://chejinying.com/tech/posts/vm/victorial_metrics/</link><pubDate>Tue, 13 Feb 2024 07:37:29 +0800</pubDate><guid>https://chejinying.com/tech/posts/vm/victorial_metrics/</guid><description>&lt;h2 id="quick-start"&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Victoria Metrics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An easy way to run VictoriaMetrics locally is to build from the &lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/#how-to-build-from-sources"&gt;source code&lt;/a&gt; as there&amp;rsquo;re lots of vm binaries like vmselect, vmstorage, vminsert, etc. to download, and all of them are maintained in the same &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics"&gt;repository&lt;/a&gt;, and &lt;code&gt;Makefile&lt;/code&gt; is quite straightforward.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git clone git@github.com:VictoriaMetrics/VictoriaMetrics.git
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;make victoria-metrics
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;mv /bin/victoria-metrics /usr/bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Run VictoriaMetrics With Systemd
see &lt;a href="https://docs.victoriametrics.com/quick-start/#starting-vm-single-from-a-binary"&gt;details&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Victoria Metrics Single&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;Documentation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://https://docs.victoriametrics.com/
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;network.target
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;simple
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/victoria-metrics-prod &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -storageDataPath&lt;span class="o"&gt;=&lt;/span&gt;/data/vm &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -httpListenAddr&lt;span class="o"&gt;=&lt;/span&gt;:8428 &lt;span class="se"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="se"&gt;&lt;/span&gt; -promscrape.config&lt;span class="o"&gt;=&lt;/span&gt;/etc/prometheus/scrape.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;ExecStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/kill -s SIGTERM &lt;span class="nv"&gt;$MAINPID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on-failure
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;SuccessExitStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;65536&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;StandardOutput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/vm/out.log
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;StandardError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/log/vm/err.log
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;SyslogIdentifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prometheus
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="storage"&gt;Storage&lt;/h2&gt;
&lt;h3 id="on-disk-layout"&gt;On Disk Layout&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-txt" data-lang="txt"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;./data
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── big
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   ├── 2024_01
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   ├── 17A6101707C91B08
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   │   ├── index.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   │   ├── metadata.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   │   ├── metaindex.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   │   ├── timestamps.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   │   └── values.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   ├── 2024_02
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   ├── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   └── snapshots
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   ├── 20240109092239-179E85E399D5EFDA
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   ├── 2023_12
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   │   └── 2024_01
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   └── 20240111104529-179E85E399D5EFDB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   ├── 2023_12
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│   └── 2024_01
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── flock.lock
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;└── small
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├── 2024_01
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; │   ├── 17A6101707CC58EF
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; │   │   ├── index.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; │   │   ├── metadata.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; │   │   ├── metaindex.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; │   │   ├── timestamps.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; │   │   └── values.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    └── snapshots
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    ├── 20240109092239-179E85E399D5EFDA
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    │   ├── 2023_12
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    │   └── 2024_01
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    └── 20240111104529-179E85E399D5EFDB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    ├── 2023_12
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;    └── 2024_01
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For details, see &lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/#storage"&gt;doc&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Prometheus Overview</title><link>https://chejinying.com/tech/posts/prometheus/</link><pubDate>Sun, 31 Dec 2023 09:41:04 +0800</pubDate><guid>https://chejinying.com/tech/posts/prometheus/</guid><description>&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/prometheus.png" alt="Architecture"&gt;&lt;/p&gt;
&lt;h2 id="quick-start"&gt;Quick Start&lt;/h2&gt;
&lt;h2 id="data-model"&gt;Data Model&lt;/h2&gt;
&lt;p&gt;Every time series is uniquely identified by its &lt;strong&gt;metric name&lt;/strong&gt; and optional key-value pairs called &lt;strong&gt;labels&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Metric Name&lt;/li&gt;
&lt;li&gt;Metric Label
&lt;ul&gt;
&lt;li&gt;The change of any labels value, including adding or removing labels, will create a new time series.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="metric-type"&gt;Metric Type&lt;/h4&gt;
&lt;p&gt;Prometheus supports four types of metrics, which are - Counter - Gauge - Histogram - Summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Counter: a metric value that can only increase or reset
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# use a counter to represent the number of requests served, tasks completed, or errors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;- http_requests_total&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/get_user_id&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;- errors_total&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runtime&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;severity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;critical&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Gauge: a number which can either go up or down
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# used for measured values like temperatures or current memory usage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;- memory_usage_bytes&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;process_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;web_server&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10.0.0.1:8080&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;- queue_size&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;queue_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;low_priority&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;worker_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;background&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Histogram: used for any calculated value which is counted based on bucket values,
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bucket&lt;/strong&gt; value determines the ordinate value (y coordinate of a standard two-dimensional graph)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cumulative&lt;/strong&gt; counters for the observation buckets, exposed as &lt;!-- raw HTML omitted --&gt;_bucket{le=&amp;quot;&amp;lt;&lt;strong&gt;upper&lt;/strong&gt; inclusive bound&amp;gt;&amp;quot;}&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# usually things like request durations or response sizes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# le=&amp;#34;0.3&amp;#34; means less or equal to 0.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_sum 134420.14452212452
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_second_bucket&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;le&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;0.05&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 11326.0
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_second_bucket&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;le&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;0.1&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 2.284831e+06
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_second_bucket&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;le&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;0.15&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 2.285367e+06
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_second_bucket&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;le&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;0.25&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 2.285592e+06
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_second_bucket&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;le&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 2.285613e+06
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_second_bucket&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;le&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;+Inf&amp;#34;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; 2.285619e+06
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;http_latency_count 2.285619e+06
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# cumulative means that the count for le=”0.5” bucket also includes the count for le=”0.25” bucket.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Consider the following hypothetical distribution of observations for 200 observations.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;┌─────────────┬──────────────────────┬──────────────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ Bucket Size │ Cumulative Frequency │ Upper Bound │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ │ Count │ Percentile │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├─────────────┼──────────────────────┼──────────────────┤
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ 50ms │ &lt;span class="m"&gt;20&lt;/span&gt; │ p10 │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ 100ms │ &lt;span class="m"&gt;70&lt;/span&gt; │ p35 │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ 250ms │ &lt;span class="m"&gt;120&lt;/span&gt; │ p60 │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ 500ms │ &lt;span class="m"&gt;150&lt;/span&gt; │ p75 │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ 1000ms │ &lt;span class="m"&gt;200&lt;/span&gt; │ p100 │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ INF │ &lt;span class="m"&gt;200&lt;/span&gt; │ p100 │
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;└─────────────┴──────────────────────┴──────────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Summary: measure events and are an alternative to histograms. They are cheaper but lose more data (it is highly recommended to use histograms over summaries whenever possible.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="storage"&gt;Storage&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/tsdb_write.png" alt="workflow"&gt;&lt;/p&gt;</description></item></channel></rss>