<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monitor on</title><link>https://jinying-che.github.io/tags/monitor/</link><description>Recent content in Monitor on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 02 Oct 2024 09:52:53 +0800</lastBuildDate><atom:link href="https://jinying-che.github.io/tags/monitor/index.xml" rel="self" type="application/rss+xml"/><item><title>rate vs irate</title><link>https://jinying-che.github.io/posts/rate_vs_irate/</link><pubDate>Wed, 02 Oct 2024 09:52:53 +0800</pubDate><guid>https://jinying-che.github.io/posts/rate_vs_irate/</guid><description>&lt;p>&lt;img alt="rate_vs_irate" src="https://jinying-che.github.io/images/rate_vs_irate.png">&lt;/p>
&lt;p>&lt;code>rate&lt;/code> and &lt;code>irate&lt;/code> are based on the &lt;strong>counter&lt;/strong> type metrics.&lt;/p>
&lt;p>&lt;code>rate(v range-vector)&lt;/code> calculates the per-second average rate of increase of the time series in the &lt;strong>range vector&lt;/strong>, for example, &lt;code>rate(http_request_total{method=&amp;quot;post&amp;quot;}[1m])&lt;/code>&lt;/p>
&lt;ol>
&lt;li>It&amp;rsquo;s a rate: &lt;code>total(now) - total(now - 1m) / 60s&lt;/code>&lt;/li>
&lt;li>It&amp;rsquo;s an average rate: over 1m&lt;/li>
&lt;li>Average is calculated over the time range, that&amp;rsquo;s why range vector is required.&lt;/li>
&lt;li>It provides a &lt;strong>smoother&lt;/strong> trend.&lt;/li>
&lt;/ol>
&lt;p>&lt;code>irate(v range-vector)&lt;/code> calculates the per-second instant rate of increase of the time series in the range vector.&lt;/p></description><content>&lt;p>&lt;img alt="rate_vs_irate" src="https://jinying-che.github.io/images/rate_vs_irate.png">&lt;/p>
&lt;p>&lt;code>rate&lt;/code> and &lt;code>irate&lt;/code> are based on the &lt;strong>counter&lt;/strong> type metrics.&lt;/p>
&lt;p>&lt;code>rate(v range-vector)&lt;/code> calculates the per-second average rate of increase of the time series in the &lt;strong>range vector&lt;/strong>, for example, &lt;code>rate(http_request_total{method=&amp;quot;post&amp;quot;}[1m])&lt;/code>&lt;/p>
&lt;ol>
&lt;li>It&amp;rsquo;s a rate: &lt;code>total(now) - total(now - 1m) / 60s&lt;/code>&lt;/li>
&lt;li>It&amp;rsquo;s an average rate: over 1m&lt;/li>
&lt;li>Average is calculated over the time range, that&amp;rsquo;s why range vector is required.&lt;/li>
&lt;li>It provides a &lt;strong>smoother&lt;/strong> trend.&lt;/li>
&lt;/ol>
&lt;p>&lt;code>irate(v range-vector)&lt;/code> calculates the per-second instant rate of increase of the time series in the range vector.&lt;/p>
&lt;ol>
&lt;li>similar to &lt;code>rate&lt;/code>, but it&amp;rsquo;s an &lt;strong>sensitive&lt;/strong> rate as it&amp;rsquo;s based on &lt;strong>the last two data points&lt;/strong>.&lt;/li>
&lt;li>why calculate last two points still needs [1m] range? it&amp;rsquo;s for looking back when the data point is missed&lt;/li>
&lt;/ol>
&lt;h2 id="reference">Reference:&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.robustperception.io/how-does-a-prometheus-counter-work/">https://www.robustperception.io/how-does-a-prometheus-counter-work/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/functions/">https://prometheus.io/docs/prometheus/latest/querying/functions/&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>alertmanager</title><link>https://jinying-che.github.io/posts/alertmanager/</link><pubDate>Wed, 29 May 2024 08:54:49 +0800</pubDate><guid>https://jinying-che.github.io/posts/alertmanager/</guid><description>&lt;h3 id="architecture">Architecture&lt;/h3>
&lt;p>&lt;img alt="arch" src="https://jinying-che.github.io/images/alertmanager.png">&lt;/p>
&lt;h3 id="design">Design&lt;/h3>
&lt;h5 id="1-no-dedicated-status-eg-firing-or-resolved">1. No dedicated status (e.g. firing or resolved)&lt;/h5>
&lt;p>differentiate the alert by &lt;code>EndAt&lt;/code> timestamp&lt;/p>
&lt;h5 id="2-group_wait-vs-group_interval-vs-repeat_interval">2. group_wait vs group_interval vs repeat_interval&lt;/h5>
&lt;p>&lt;img alt="group" src="https://jinying-che.github.io/images/am_group.png">&lt;/p>
&lt;h3 id="source-code">Source Code&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Entrance&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>api: &lt;code>api/v2/api.go&lt;/code>&lt;/li>
&lt;li>dispatch: &lt;code>dispatch/dispatch.go&lt;/code>&lt;/li>
&lt;/ul></description><content>&lt;h3 id="architecture">Architecture&lt;/h3>
&lt;p>&lt;img alt="arch" src="https://jinying-che.github.io/images/alertmanager.png">&lt;/p>
&lt;h3 id="design">Design&lt;/h3>
&lt;h5 id="1-no-dedicated-status-eg-firing-or-resolved">1. No dedicated status (e.g. firing or resolved)&lt;/h5>
&lt;p>differentiate the alert by &lt;code>EndAt&lt;/code> timestamp&lt;/p>
&lt;h5 id="2-group_wait-vs-group_interval-vs-repeat_interval">2. group_wait vs group_interval vs repeat_interval&lt;/h5>
&lt;p>&lt;img alt="group" src="https://jinying-che.github.io/images/am_group.png">&lt;/p>
&lt;h3 id="source-code">Source Code&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Entrance&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>api: &lt;code>api/v2/api.go&lt;/code>&lt;/li>
&lt;li>dispatch: &lt;code>dispatch/dispatch.go&lt;/code>&lt;/li>
&lt;/ul></content></item><item><title>Victorial Metrics</title><link>https://jinying-che.github.io/posts/victorial_metrics/</link><pubDate>Tue, 13 Feb 2024 07:37:29 +0800</pubDate><guid>https://jinying-che.github.io/posts/victorial_metrics/</guid><description>&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;p>&lt;strong>Victoria Metrics&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>An easy way to run VictoriaMetrics locally is to build from the &lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/#how-to-build-from-sources">source code&lt;/a> as there&amp;rsquo;re lots of vm binaries like vmselect, vmstorage, vminsert, etc. to download, and all of them are maintained in the same &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics">repository&lt;/a>, and &lt;code>Makefile&lt;/code> is quite straightforward.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone git@github.com:VictoriaMetrics/VictoriaMetrics.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make victoria-metrics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv /bin/victoria-metrics /usr/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Run VictoriaMetrics With Systemd&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Victoria Metrics Single&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>https://https://docs.victoriametrics.com/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>network.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type&lt;span style="color:#f92672">=&lt;/span>simple
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStart&lt;span style="color:#f92672">=&lt;/span>/usr/bin/victoria-metrics-prod &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -storageDataPath&lt;span style="color:#f92672">=&lt;/span>/data/vm &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -httpListenAddr&lt;span style="color:#f92672">=&lt;/span>:8428 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -promscrape.config&lt;span style="color:#f92672">=&lt;/span>/etc/prometheus/scrape.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStop&lt;span style="color:#f92672">=&lt;/span>/bin/kill -s SIGTERM $MAINPID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Restart&lt;span style="color:#f92672">=&lt;/span>on-failure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SuccessExitStatus&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LimitNOFILE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StandardOutput&lt;span style="color:#f92672">=&lt;/span>/var/log/vm/out.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StandardError&lt;span style="color:#f92672">=&lt;/span>/var/log/vm/err.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SyslogIdentifier&lt;span style="color:#f92672">=&lt;/span>prometheus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WantedBy&lt;span style="color:#f92672">=&lt;/span>multi-user.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="storage">Storage&lt;/h2>
&lt;h3 id="on-disk-layout">On Disk Layout&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>./data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── big
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── 17A6101707C91B08
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── index.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── metaindex.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── timestamps.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── values.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 2024_02
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── snapshots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 20240109092239-179E85E399D5EFDA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── 20240111104529-179E85E399D5EFDB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── flock.lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── small
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   ├── 17A6101707CC58EF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── index.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── metaindex.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── timestamps.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   └── values.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── snapshots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ├── 20240109092239-179E85E399D5EFDA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   └── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── 20240111104529-179E85E399D5EFDB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── 2024_01
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For details, see &lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/#storage">doc&lt;/a>&lt;/p></description><content>&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;p>&lt;strong>Victoria Metrics&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>An easy way to run VictoriaMetrics locally is to build from the &lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/#how-to-build-from-sources">source code&lt;/a> as there&amp;rsquo;re lots of vm binaries like vmselect, vmstorage, vminsert, etc. to download, and all of them are maintained in the same &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics">repository&lt;/a>, and &lt;code>Makefile&lt;/code> is quite straightforward.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone git@github.com:VictoriaMetrics/VictoriaMetrics.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make victoria-metrics
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv /bin/victoria-metrics /usr/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Run VictoriaMetrics With Systemd&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Description&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Victoria Metrics Single&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Documentation&lt;span style="color:#f92672">=&lt;/span>https://https://docs.victoriametrics.com/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>After&lt;span style="color:#f92672">=&lt;/span>network.target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type&lt;span style="color:#f92672">=&lt;/span>simple
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStart&lt;span style="color:#f92672">=&lt;/span>/usr/bin/victoria-metrics-prod &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -storageDataPath&lt;span style="color:#f92672">=&lt;/span>/data/vm &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -httpListenAddr&lt;span style="color:#f92672">=&lt;/span>:8428 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -promscrape.config&lt;span style="color:#f92672">=&lt;/span>/etc/prometheus/scrape.yml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStop&lt;span style="color:#f92672">=&lt;/span>/bin/kill -s SIGTERM $MAINPID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Restart&lt;span style="color:#f92672">=&lt;/span>on-failure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SuccessExitStatus&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LimitNOFILE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">65536&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StandardOutput&lt;span style="color:#f92672">=&lt;/span>/var/log/vm/out.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StandardError&lt;span style="color:#f92672">=&lt;/span>/var/log/vm/err.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SyslogIdentifier&lt;span style="color:#f92672">=&lt;/span>prometheus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Install&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WantedBy&lt;span style="color:#f92672">=&lt;/span>multi-user.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="storage">Storage&lt;/h2>
&lt;h3 id="on-disk-layout">On Disk Layout&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>./data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── big
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── 17A6101707C91B08
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── index.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── metaindex.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   ├── timestamps.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   │   └── values.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 2024_02
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── snapshots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 20240109092239-179E85E399D5EFDA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   │   └── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── 20240111104529-179E85E399D5EFDB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│   └── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── flock.lock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── small
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   ├── 17A6101707CC58EF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── index.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── metaindex.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   ├── timestamps.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │   │   └── values.bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── snapshots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ├── 20240109092239-179E85E399D5EFDA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   └── 2024_01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── 20240111104529-179E85E399D5EFDB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ├── 2023_12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── 2024_01
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For details, see &lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/#storage">doc&lt;/a>&lt;/p>
&lt;ul>
&lt;li>small:&lt;/li>
&lt;li>big:&lt;/li>
&lt;li>flock.lock:&lt;/li>
&lt;/ul>
&lt;p>for each part:&lt;/p>
&lt;ul>
&lt;li>index.bin:&lt;/li>
&lt;li>metadata.json:&lt;/li>
&lt;li>metaindex.bin:&lt;/li>
&lt;li>timestamps.bin:&lt;/li>
&lt;li>values.bin:&lt;/li>
&lt;/ul>
&lt;p>snapshot:&lt;/p>
&lt;h3 id="write-flow">Write Flow&lt;/h3>
&lt;p>Ingested Data -&amp;gt; create reverted index(two type of index) -&amp;gt; Buffer -&amp;gt; In-memory Parts -&amp;gt; Disk (flush into disk periodically) -&amp;gt; Merge in the background -&amp;gt; Disk&lt;/p>
&lt;p>When index created?&lt;/p>
&lt;p>VM vs Prometheus (Disk)
TBD&lt;/p>
&lt;h3 id="read-flow">Read Flow&lt;/h3>
&lt;h2 id="referrence">Referrence&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.victoriametrics.com/single-server-victoriametrics/">https://docs.victoriametrics.com/single-server-victoriametrics/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics/issues/3268">https://github.com/VictoriaMetrics/VictoriaMetrics/issues/3268&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Prometheus Overview</title><link>https://jinying-che.github.io/posts/prometheus/</link><pubDate>Sun, 31 Dec 2023 09:41:04 +0800</pubDate><guid>https://jinying-che.github.io/posts/prometheus/</guid><description>&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>&lt;img alt="Architecture" src="https://jinying-che.github.io/images/prometheus.png">&lt;/p>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h2 id="data-model">Data Model&lt;/h2>
&lt;p>Every time series is uniquely identified by its &lt;strong>metric name&lt;/strong> and optional key-value pairs called &lt;strong>labels&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>Metric Name&lt;/li>
&lt;li>Metric Label
&lt;ul>
&lt;li>The change of any labels value, including adding or removing labels, will create a new time series.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="metric-type">Metric Type&lt;/h4>
&lt;p>Prometheus supports four types of metrics, which are - Counter - Gauge - Histogram - Summary&lt;/p>
&lt;ul>
&lt;li>Counter: a metric value that can only increase or reset
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># use a counter to represent the number of requests served, tasks completed, or errors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- http_requests_total&lt;span style="color:#f92672">{&lt;/span>handler&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/get_user_id&amp;#39;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;GET&amp;#39;&lt;/span>, status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;200&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- errors_total&lt;span style="color:#f92672">{&lt;/span>type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;runtime&amp;#39;&lt;/span>, severity&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;critical&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Gauge: a number which can either go up or down
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># used for measured values like temperatures or current memory usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- memory_usage_bytes&lt;span style="color:#f92672">{&lt;/span>process_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;web_server&amp;#39;&lt;/span>, instance&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;10.0.0.1:8080&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- queue_size&lt;span style="color:#f92672">{&lt;/span>queue_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;low_priority&amp;#39;&lt;/span>, worker_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;background&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Histogram: used for any calculated value which is counted based on bucket values,
&lt;ul>
&lt;li>&lt;strong>bucket&lt;/strong> value determines the ordinate value (y coordinate of a standard two-dimensional graph)&lt;/li>
&lt;li>&lt;strong>cumulative&lt;/strong> counters for the observation buckets, exposed as &lt;!-- raw HTML omitted -->_bucket{le=&amp;quot;&amp;lt;&lt;strong>upper&lt;/strong> inclusive bound&amp;gt;&amp;quot;}&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># usually things like request durations or response sizes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># le=&amp;#34;0.3&amp;#34; means less or equal to 0.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_sum 134420.14452212452
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.05&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 11326.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.284831e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.15&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285367e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.25&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285592e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285613e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+Inf&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285619e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_count 2.285619e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># cumulative means that the count for le=”0.5” bucket also includes the count for le=”0.25” bucket.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Consider the following hypothetical distribution of observations for 200 observations.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌─────────────┬──────────────────────┬──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Bucket Size │ Cumulative Frequency │ Upper Bound │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ Count │ Percentile │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─────────────┼──────────────────────┼──────────────────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 50ms │ &lt;span style="color:#ae81ff">20&lt;/span> │ p10 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 100ms │ &lt;span style="color:#ae81ff">70&lt;/span> │ p35 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 250ms │ &lt;span style="color:#ae81ff">120&lt;/span> │ p60 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 500ms │ &lt;span style="color:#ae81ff">150&lt;/span> │ p75 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 1000ms │ &lt;span style="color:#ae81ff">200&lt;/span> │ p100 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ INF │ &lt;span style="color:#ae81ff">200&lt;/span> │ p100 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─────────────┴──────────────────────┴──────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Summary: measure events and are an alternative to histograms. They are cheaper but lose more data (it is highly recommended to use histograms over summaries whenever possible.)&lt;/li>
&lt;/ul>
&lt;h2 id="storage">Storage&lt;/h2>
&lt;p>&lt;img alt="workflow" src="https://jinying-che.github.io/images/tsdb_write.png">&lt;/p></description><content>&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>&lt;img alt="Architecture" src="https://jinying-che.github.io/images/prometheus.png">&lt;/p>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h2 id="data-model">Data Model&lt;/h2>
&lt;p>Every time series is uniquely identified by its &lt;strong>metric name&lt;/strong> and optional key-value pairs called &lt;strong>labels&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>Metric Name&lt;/li>
&lt;li>Metric Label
&lt;ul>
&lt;li>The change of any labels value, including adding or removing labels, will create a new time series.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="metric-type">Metric Type&lt;/h4>
&lt;p>Prometheus supports four types of metrics, which are - Counter - Gauge - Histogram - Summary&lt;/p>
&lt;ul>
&lt;li>Counter: a metric value that can only increase or reset
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># use a counter to represent the number of requests served, tasks completed, or errors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- http_requests_total&lt;span style="color:#f92672">{&lt;/span>handler&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/get_user_id&amp;#39;&lt;/span>, method&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;GET&amp;#39;&lt;/span>, status&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;200&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- errors_total&lt;span style="color:#f92672">{&lt;/span>type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;runtime&amp;#39;&lt;/span>, severity&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;critical&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Gauge: a number which can either go up or down
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># used for measured values like temperatures or current memory usage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- memory_usage_bytes&lt;span style="color:#f92672">{&lt;/span>process_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;web_server&amp;#39;&lt;/span>, instance&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;10.0.0.1:8080&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- queue_size&lt;span style="color:#f92672">{&lt;/span>queue_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;low_priority&amp;#39;&lt;/span>, worker_type&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;background&amp;#39;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Histogram: used for any calculated value which is counted based on bucket values,
&lt;ul>
&lt;li>&lt;strong>bucket&lt;/strong> value determines the ordinate value (y coordinate of a standard two-dimensional graph)&lt;/li>
&lt;li>&lt;strong>cumulative&lt;/strong> counters for the observation buckets, exposed as &lt;!-- raw HTML omitted -->_bucket{le=&amp;quot;&amp;lt;&lt;strong>upper&lt;/strong> inclusive bound&amp;gt;&amp;quot;}&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># usually things like request durations or response sizes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># le=&amp;#34;0.3&amp;#34; means less or equal to 0.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_sum 134420.14452212452
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.05&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 11326.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.284831e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.15&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285367e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;0.25&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285592e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285613e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_second_bucket&lt;span style="color:#f92672">{&lt;/span>le&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+Inf&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span> 2.285619e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_latency_count 2.285619e+06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># cumulative means that the count for le=”0.5” bucket also includes the count for le=”0.25” bucket.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Consider the following hypothetical distribution of observations for 200 observations.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌─────────────┬──────────────────────┬──────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Bucket Size │ Cumulative Frequency │ Upper Bound │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ Count │ Percentile │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├─────────────┼──────────────────────┼──────────────────┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 50ms │ &lt;span style="color:#ae81ff">20&lt;/span> │ p10 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 100ms │ &lt;span style="color:#ae81ff">70&lt;/span> │ p35 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 250ms │ &lt;span style="color:#ae81ff">120&lt;/span> │ p60 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 500ms │ &lt;span style="color:#ae81ff">150&lt;/span> │ p75 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ 1000ms │ &lt;span style="color:#ae81ff">200&lt;/span> │ p100 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ INF │ &lt;span style="color:#ae81ff">200&lt;/span> │ p100 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─────────────┴──────────────────────┴──────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Summary: measure events and are an alternative to histograms. They are cheaper but lose more data (it is highly recommended to use histograms over summaries whenever possible.)&lt;/li>
&lt;/ul>
&lt;h2 id="storage">Storage&lt;/h2>
&lt;p>&lt;img alt="workflow" src="https://jinying-che.github.io/images/tsdb_write.png">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>./data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── 01BKGV7JBM69T2G1BGBGM6KB12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── meta.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── 01BKGTZQ1SYQJTR4PB43C8PD98
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── chunks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── 000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── tombstones
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── meta.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── 01BKGTZQ1HHWHV8FBJXW1Y3W0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── meta.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── 01BKGV7JC0RY8A6MACW02A2PJD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── chunks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ │ └── 000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── tombstones
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ ├── index
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── meta.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── chunks_head
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ └── 000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── wal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├── 000000002
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── checkpoint.00000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── 00000000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>see &lt;a href="https://prometheus.io/docs/prometheus/latest/storage/#on-disk-layout">detals&lt;/a>, simple put:&lt;/p>
&lt;ul>
&lt;li>&lt;code>blocks&lt;/code>: ingested samples are grouped into blocks of 2 hours, e.g. &lt;em>01BKGV7JBM69T2G1BGBGM6KB12&lt;/em> is a block&lt;/li>
&lt;li>&lt;code>chunks&lt;/code>:
&lt;ul>
&lt;li>it&amp;rsquo;s a directory that contains the time series data for that window of time (up to 2 hours)&lt;/li>
&lt;li>The samples in the chunks directory are grouped together into one or more segment files of up to 512MB each by default&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>tombstones&lt;/code>: marked deletion records (instead of deleting the data immediately from the chunk segments)&lt;/li>
&lt;li>&lt;code>index&lt;/code>: &lt;strong>inverted index&lt;/strong> which indexes metric names and labels to time series in the chunks directory&lt;/li>
&lt;li>&lt;code>meta.json&lt;/code>: block info&lt;/li>
&lt;li>&lt;code>wal&lt;/code>(write-ahead log):
&lt;ul>
&lt;li>The current block for incoming samples is kept in memory and is not fully persisted. It is secured against crashes by a write-ahead log (WAL) that can be replayed when the Prometheus server restarts.&lt;/li>
&lt;li>files are stored in the wal directory in 128MB segments, which are significantly larger than regular block files (not yet been compacted)&lt;/li>
&lt;li>minimum of 3 write-ahead log files. High-traffic servers may retain more than 3 WAL files in order to keep at least 2 hours of raw data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="promql">PromQL&lt;/h2>
&lt;h4 id="time-series-selectors">Time series Selectors&lt;/h4>
&lt;p>&lt;strong>Instant Vector&lt;/strong>&lt;/p>
&lt;p>Instant vector selectors allow the selection of a set of time series and a single sample value for each at a given timestamp (instant)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># only metric name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_requests_total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># with labels&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_requests_total&lt;span style="color:#f92672">{&lt;/span>job&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>,group&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;canary&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># with regex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http_requests_total&lt;span style="color:#f92672">{&lt;/span>environment&lt;span style="color:#f92672">=&lt;/span>~&lt;span style="color:#e6db74">&amp;#34;staging|testing|development&amp;#34;&lt;/span>,method!&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Range Vector Selectors&lt;/strong>&lt;/p>
&lt;p>Range vector literals work like instant vector literals, except that they select a range of samples back from the current instant&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>http_requests_total&lt;span style="color:#f92672">{&lt;/span>job&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;prometheus&amp;#34;&lt;/span>&lt;span style="color:#f92672">}[&lt;/span>5m&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Offset Modifier&lt;/strong>&lt;/p>
&lt;p>The offset modifier allows changing the time offset for individual &lt;strong>instant&lt;/strong> and &lt;strong>range&lt;/strong> vectors in a query.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># returns the 5-minute rate that http_requests_total had a week ago&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rate&lt;span style="color:#f92672">(&lt;/span>http_requests_total&lt;span style="color:#f92672">[&lt;/span>5m&lt;span style="color:#f92672">]&lt;/span> offset 1w&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="functions">Functions&lt;/h4>
&lt;p>There are some common functions in PromQL which are used in most popular queries and scenarios.&lt;/p>
&lt;h5 id="1-rate--irate">1. rate() &amp;amp;&amp;amp; irate()&lt;/h5>
&lt;p>&lt;a href="https://jinying-che.github.io/posts/rate_vs_irate/">see details&lt;/a>&lt;/p>
&lt;h6 id="2-histogram_quantile">2. histogram_quantile()&lt;/h6>
&lt;p>How P99 is calculated?&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">https://prometheus.io/docs/prometheus/latest/querying/basics/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://promlabs.com/blog/2023/08/31/high-availability-for-prometheus-and-alertmanager-an-overview/">https://promlabs.com/blog/2023/08/31/high-availability-for-prometheus-and-alertmanager-an-overview/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.google.com/presentation/d/1TMvzwdaS8Vw9MtscI9ehDyiMngII8iB_Z5D4QW4U4ho/edit?pli=1#slide=id.gae9988762_0_0">PromCon 2016 - The Prometheus TSDB Slides&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhenghe-md.github.io/blog/2020/02/27/The-Evolution-of-Prometheus-Storage-Layer/">The Evolution of Prometheus Storage Layer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ganeshvernekar.com/blog/prometheus-tsdb-the-head-block/">Prometheus TSDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://web.archive.org/web/20210803115658/https://fabxc.org/tsdb">Writing a Time Series Database from Scratch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://news.ycombinator.com/item?id=27730854">Write a time-series database engine from scratch (hancker news)&lt;/a>&lt;/li>
&lt;/ul></content></item></channel></rss>