<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on</title><link>https://chejinying.com/tech/tags/linux/</link><description>Recent content in Linux on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 22 Nov 2024 08:00:37 +0800</lastBuildDate><atom:link href="https://chejinying.com/tech/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>vps setup</title><link>https://chejinying.com/tech/posts/vps_setup/</link><pubDate>Fri, 22 Nov 2024 08:00:37 +0800</pubDate><guid>https://chejinying.com/tech/posts/vps_setup/</guid><description>&lt;p&gt;Welcome to play the personal linux server, here&amp;rsquo;s the setup list that all you need.&lt;/p&gt;
&lt;h2 id="admin"&gt;Admin&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;systemd&lt;/li&gt;
&lt;li&gt;ifconfig (for network config)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt install net-tools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sysstat (for iostat etc.)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt install sysstat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="dev"&gt;Dev&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;on my zsh
&lt;ul&gt;
&lt;li&gt;theme: &lt;a href="https://starship.rs/"&gt;https://starship.rs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gcc&lt;/li&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;li&gt;make
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt install make&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>systemd</title><link>https://chejinying.com/tech/posts/systemd/</link><pubDate>Wed, 03 Jul 2024 08:19:14 +0800</pubDate><guid>https://chejinying.com/tech/posts/systemd/</guid><description>&lt;h2 id="what-is-systemd"&gt;what is systemd?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;systemd is a suite of basic building blocks for a Linux system.&lt;/li&gt;
&lt;li&gt;It provides a system and service manager that runs as PID 1 and starts the rest of the system.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="where-is-the-config-file"&gt;Where is the config file?&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;systemd-analyze unit-paths
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The systemd manager scans many directories to load unit files, for user-defined units:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;/etc/systemd/system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="unit-file"&gt;Unit File&lt;/h2&gt;
&lt;p&gt;A unit file is a plain text ini-style file that encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or partition, a start-up target, a watched file system path, a timer controlled and supervised by systemd(1), a resource management slice or a group of externally created processes.&lt;/p&gt;</description></item><item><title>CPU</title><link>https://chejinying.com/tech/posts/cpu/</link><pubDate>Mon, 16 Oct 2023 22:54:48 +0800</pubDate><guid>https://chejinying.com/tech/posts/cpu/</guid><description>&lt;h2 id="process-vs-thread"&gt;Process vs Thread&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/cpu_tools.png" alt="overview"&gt;&lt;/p&gt;
&lt;h4 id="0-procstat"&gt;0 /proc/stat&lt;/h4&gt;
&lt;h4 id="1-top"&gt;1. top&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ top
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;top - 17:18:53 up &lt;span class="m"&gt;50&lt;/span&gt; days, 16:06, &lt;span class="m"&gt;7&lt;/span&gt; users, load average: 0.00, 0.00, 0.00
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Tasks: &lt;span class="m"&gt;127&lt;/span&gt; total, &lt;span class="m"&gt;1&lt;/span&gt; running, &lt;span class="m"&gt;126&lt;/span&gt; sleeping, &lt;span class="m"&gt;0&lt;/span&gt; stopped, &lt;span class="m"&gt;0&lt;/span&gt; zombie
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;%Cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;: 0.0 us, 0.0 sy, 0.0 ni,100.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;MiB Mem : 957.5 total, 122.6 free, 162.0 used, 673.0 buff/cache
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;MiB Swap: 2400.0 total, 2282.0 free, 118.0 used. 622.7 avail Mem
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="m"&gt;782513&lt;/span&gt; root &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;17312&lt;/span&gt; &lt;span class="m"&gt;11036&lt;/span&gt; &lt;span class="m"&gt;8652&lt;/span&gt; S 0.3 1.1 0:00.04 sshd
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="m"&gt;1&lt;/span&gt; root &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;167728&lt;/span&gt; &lt;span class="m"&gt;9424&lt;/span&gt; &lt;span class="m"&gt;6504&lt;/span&gt; S 0.0 1.0 3:05.88 systemd
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="m"&gt;2&lt;/span&gt; root &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; S 0.0 0.0 0:00.66 kthreadd
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# man top to get top details, simple put:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# load average : the average number of processes that are either in a runnable or uninterruptable state for the past 1, 5, and 15 minutes. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# e.g. `load average = 1.5` in 6 cpu system means 1/4 cpu is under laod, 3/4 cpu is idle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# us, user : time running un-niced user processes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# sy, system : time running kernel processes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# ni, nice : time running niced user processes (process priority, a negative nice value means higher priority, whereas a positive nice value means lower priority)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# id, idle : time spent in the kernel idle handler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# wa, IO-wait : time waiting for I/O completion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# hi : time spent servicing hardware interrupts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# si : time spent servicing software interrupts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# st : time stolen from this vm by the hypervisor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# PR: The scheduling priority of the task (real priority of a process as seen by the kernel)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# NI: The nice value of the task (a priority hint for the kernel)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# VIRT: The total amount of virtual memory used by the task (physical memory + swap)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# RES: A subset of the virtual address space (VIRT) representing the non-swapped physical memory (only physical memory)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# SHR: A subset of resident memory (RES) that may be used by other processes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# S: Process Status, the status of the task which can be one of:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# D = uninterruptible sleep&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# I = idle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# R = running&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# S = sleeping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# T = stopped by job control signal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# t = stopped by debugger during trace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Z = zombie&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="2-vmstat"&gt;2. vmstat&lt;/h4&gt;
&lt;p&gt;vmstat reports information about processes, memory, paging, block IO, traps, disks and cpu activity&lt;/p&gt;</description></item><item><title>File System</title><link>https://chejinying.com/tech/posts/file_system/</link><pubDate>Sat, 30 Sep 2023 15:25:41 +0800</pubDate><guid>https://chejinying.com/tech/posts/file_system/</guid><description>&lt;h2 id="architecture"&gt;Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/linux_file_system.svg" alt="file system"&gt;&lt;/p&gt;
&lt;h2 id="vfs"&gt;VFS&lt;/h2&gt;
&lt;p&gt;The Virtual File System (also known as the Virtual Filesystem Switch) is the software layer in the kernel that provides the filesystem interface to userspace programs via system call. It also provides an abstraction within the kernel which allows different filesystem implementations to coexist.&lt;/p&gt;
&lt;p&gt;A VFS specifies an interface (or a &amp;ldquo;contract&amp;rdquo;) between the kernel and a concrete file system. Therefore, it is easy to add support for new file system types to the kernel simply by fulfilling the contract.&lt;/p&gt;</description></item><item><title>Memory</title><link>https://chejinying.com/tech/posts/memory/</link><pubDate>Thu, 28 Sep 2023 16:10:39 +0800</pubDate><guid>https://chejinying.com/tech/posts/memory/</guid><description>&lt;h2 id="virtual-memory"&gt;Virtual Memory&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Virtual memory is an abstraction for memory management by operation system&lt;/li&gt;
&lt;li&gt;Each process operates the virtual memory (virtual address), which is mapped to physical memory by memory management unit (MMU) in CPU&lt;/li&gt;
&lt;li&gt;The physical memory is only allocated to process when memory is firstly accessed. (e.g. &lt;code&gt;mmap()&lt;/code&gt; and &lt;code&gt;brk()&lt;/code&gt; in C just allocate the virtual memory first, hence you can see &lt;code&gt;VIRT&lt;/code&gt; in &lt;code&gt;top&lt;/code&gt; command is usually much higher than &lt;code&gt;RES&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Virtual maps to physical memory and disk (swap)&lt;/li&gt;
&lt;li&gt;Virtual memory for one process includes both user space and kernel space.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://chejinying.com/tech/images/virtual_memory.png" alt="virtual memory"&gt;&lt;/p&gt;</description></item></channel></rss>