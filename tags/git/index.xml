<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Terminal</title><link>https://jinying-che.github.io/tags/git/</link><description>Recent content in git on Terminal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Jan 2023 16:14:39 +0800</lastBuildDate><atom:link href="https://jinying-che.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Cheatsheet</title><link>https://jinying-che.github.io/posts/git_cheatsheet/</link><pubDate>Tue, 31 Jan 2023 16:14:39 +0800</pubDate><guid>https://jinying-che.github.io/posts/git_cheatsheet/</guid><description>git cheatsheet 1. How can I see the changes in a Git commit? git diff COMMIT~ COMMIT or git show COMMIT
2. How to include config directives from another source? setup a .gitconfig, .gitconfig-garena, and .gitconfig-github at $HOME as follows, all the projects under the folder will be configured recursively:
# .gitconfig [includeIf &amp;#34;gitdir:~/workspace/garena.com/&amp;#34;] path = ~/.gitconfig-garena [includeIf &amp;#34;gitdir:~/workspace/github.com/&amp;#34;] path = ~/.gitconfig-github # .gitconfig-garena [user] name = Jinying Che email = jinying.</description><content>&lt;h1 id="git-cheatsheet">git cheatsheet&lt;/h1>
&lt;h4 id="1-how-can-i-see-the-changes-in-a-git-commithttpsstackoverflowcomquestions17563726how-can-i-see-the-changes-in-a-git-commit">1. &lt;a href="https://stackoverflow.com/questions/17563726/how-can-i-see-the-changes-in-a-git-commit">How can I see the changes in a Git commit&lt;/a>?&lt;/h4>
&lt;p>&lt;code>git diff COMMIT~ COMMIT&lt;/code> or &lt;code>git show COMMIT&lt;/code>&lt;/p>
&lt;h4 id="2-how-to-include-config-directives-from-another-source">2. How to include config directives from another source?&lt;/h4>
&lt;p>setup a &lt;code>.gitconfig&lt;/code>, &lt;code>.gitconfig-garena&lt;/code>, and &lt;code>.gitconfig-github&lt;/code> at $HOME as follows, all the projects under the folder will be configured recursively:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .gitconfig&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">includeIf&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gitdir:~/workspace/garena.com/&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">path&lt;/span> = &lt;span style="color:#960050;background-color:#1e0010">~/&lt;/span>.&lt;span style="color:#a6e22e">gitconfig-garena&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">includeIf&lt;/span> &lt;span style="color:#e6db74">&amp;#34;gitdir:~/workspace/github.com/&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">path&lt;/span> = &lt;span style="color:#960050;background-color:#1e0010">~/&lt;/span>.&lt;span style="color:#a6e22e">gitconfig-github&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .gitconfig-garena&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">user&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#a6e22e">Jinying&lt;/span> &lt;span style="color:#a6e22e">Che&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span> = &lt;span style="color:#a6e22e">jinying&lt;/span>.&lt;span style="color:#a6e22e">che&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">shopee&lt;/span>.&lt;span style="color:#a6e22e">com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .gitconfig-github&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">user&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#a6e22e">Jinying&lt;/span> &lt;span style="color:#a6e22e">Che&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span> = &lt;span style="color:#a6e22e">chejinying&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>&lt;span style="color:#a6e22e">me&lt;/span>.&lt;span style="color:#a6e22e">com&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="git-branch">git branch&lt;/h3>
&lt;ol>
&lt;li>查看分支状态：
&lt;ul>
&lt;li>本地与远程： &lt;code>git branch -va&lt;/code>&lt;/li>
&lt;li>查看本地分支：&lt;code>git branch&lt;/code>&lt;/li>
&lt;li>查看远程分支：&lt;code>git branch -r&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>删除分支：
&lt;ul>
&lt;li>删除本地分支：&lt;code>git branch -d [branch-name]&lt;/code>&lt;/li>
&lt;li>删除远程分支：&lt;code>git branch -dr [origin/branch-name]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="git-status">git status&lt;/h3>
&lt;p>用法：列出未追踪的文件、本地库与工作区之间的差异，追踪&lt;code>git add&lt;/code>、&lt;code>git commit&lt;/code>进展&lt;/p>
&lt;h3 id="处理工作区与本地库的差异">处理工作区与本地库的差异&lt;/h3>
&lt;blockquote>
&lt;p>git checkout 不仅仅有切换分支的功能&lt;/p>
&lt;/blockquote>
&lt;p>工作区 —&amp;gt; 本地库：&lt;code>git checkout [filename]&lt;/code>&lt;/p>
&lt;p>本地库 —&amp;gt; 工作区：&lt;code>git add [filename]&lt;/code> &lt;code>git commit [filename] -m &amp;quot;commet&amp;quot;&lt;/code>&lt;/p>
&lt;h3 id="git-rm">git rm&lt;/h3>
&lt;ul>
&lt;li>git rm file&lt;/li>
&lt;li>git rm —cache file&lt;/li>
&lt;/ul>
&lt;p>#####不删除本地，删除远程（即删除本地缓存区，提交到远程）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> git rm —cache -r directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git commit -m &lt;span style="color:#e6db74">&amp;#34;del&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git pushf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="git-revert">git revert&lt;/h3>
&lt;blockquote>
&lt;p>这条命令用于分布式代码管理的回滚&lt;/p>
&lt;/blockquote>
&lt;p>主要区别于&lt;code>git reset&lt;/code>，&lt;code>git reset &amp;lt;commit&amp;gt;&lt;/code>，会将该版本之前的版本全部抹掉。这样在多人合作的模式下，如果我们想回滚远程主分支中的代码，会抹掉其他人的提交，相当危险。&lt;/p>
&lt;p>&lt;code>git revert &amp;lt;commit&amp;gt;&lt;/code>：撤销某个版本的提交，即只撤销这个版本的提交(这个版本提交了什么就撤销什么)，并生成一个新的版本，原版本依然保留。这个新版本只提交到了本地库，还需要&lt;code>git push&lt;/code>到远程仓库，才能完成远程仓库代码的回滚。&lt;/p>
&lt;h3 id="git-合并上游fork-项目更新">git 合并上游fork 项目更新&lt;/h3>
&lt;blockquote>
&lt;p>git remote add upstream url&lt;/p>
&lt;p>git fetch upstream&lt;/p>
&lt;p>git merge upsteam/master&lt;/p>
&lt;p>注：期间可以通过&lt;code>git remote -v&lt;/code>查看分支情况&lt;/p>
&lt;/blockquote>
&lt;h2 id="merge-其他分支的指定文件">merge 其他分支的指定文件&lt;/h2>
&lt;blockquote>
&lt;p>没错，是checkout，但有一点需要注意：会直接覆盖本地的文件，没有merge合并代码的过程&lt;/p>
&lt;/blockquote>
&lt;p>git checkout branch_name filename&lt;/p>
&lt;p>##远程覆盖本地代码&lt;/p>
&lt;ul>
&lt;li>
&lt;p>git fetch &amp;ndash;all&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git reset &amp;ndash;hard origin/master&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git pull&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="关于撤销的一切">关于撤销的一切&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.fengerzh.com/git-reset/">https://www.fengerzh.com/git-reset/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>代码修改，未&lt;code>git add &lt;/code>&lt;/p>
&lt;p>&lt;code>git checkout .&lt;/code> 或 &lt;code>git reset --hard&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>git add .&lt;/code> 和 &lt;code>git checkout .&lt;/code> 是一对逆操作&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>已经&lt;code>git add &lt;/code>，未&lt;code>git commit &lt;/code>&lt;/p>
&lt;p>&lt;code>git reset &lt;/code> + &lt;code>git chekcout .&lt;/code> 或 &lt;code>git reset --hard&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>已经&lt;code>git commit &lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>git reset head^&lt;/code>：撤销commit提交，本地库恢复到上一个版本，工作区不变&lt;/li>
&lt;li>&lt;code>git reset --hard head^&lt;/code>：撤销commit提交，本地库和工作区同时恢复到上一个版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>已经 &lt;code>git push&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>本地覆盖远程&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>git reset --hard HEAD^&lt;/code>
&lt;code>git push -f&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="squash-commits">Squash commits&lt;/h2>
&lt;ul>
&lt;li>&lt;code>git rebase -i commit-version&lt;/code> (which is earlist one that squash beginning from)&lt;/li>
&lt;li>change &lt;code>pick&lt;/code> to &lt;code>s&lt;/code>(squash) manually by edting the file, leave the first &lt;code>pick&lt;/code>, then &lt;code>:wq&lt;/code>(for vim)&lt;/li>
&lt;li>Edit the commit message, leave the msg for the final commiting, then&lt;code>:wq&lt;/code>(for vim)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Reference : &lt;a href="https://github.com/geeeeeeeeek/git-recipes/wiki/2.6-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9">回滚错误修改&lt;/a>&lt;/p>
&lt;/blockquote></content></item></channel></rss>